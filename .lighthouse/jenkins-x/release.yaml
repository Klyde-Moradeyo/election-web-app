apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: release
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        stepTemplate:
          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/ruby/release.yaml@versionStream
          name: ""
          resources:
            requests:
              cpu: 400m
              memory: 512Mi
          workingDir: /workspace/source
        steps:
        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream
          name: ""
          resources: {}
        - env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                key: password
                name: tekton-git
          - name: GIT_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: tekton-git
          image: ghcr.io/jenkins-x/jx-release-version:2.5.1
          name: next-version
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx-release-version --tag > VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.2.287
          name: jx-variables
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: ghcr.io/jenkins-x/jx-registry:0.1.1
          name: check-registry
          resources: {}
        - image: ruby:3.0.3
          name: ruby-db-migrations 
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            set -e # Makes terminal exit on error
            apt update
            apt-get install -y postgresql
            # Standrd Ruby on Rails bundle install
            bundle install --without test
            unset VERSION

            echo "-------- Migrate Staging DB | START --------"
            RACK_ENV=RAILS_ENV=development RAILS_ENV=development rake db:migrate
            echo "-------- Migrate Staging DB | END --------"
             
            echo "-------- Migrate Production DB | START --------"
            RAKE_SECRET=$(RAILS_ENV=production rake secret)
            export SECRET_KEY_BASE=$RAKE_SECRET
            #RACK_ENV=production RAILS_ENV=production bundle exec rake db:migrate
            echo "-------- Migrate Production DB  | END --------"
        - image: ruby:3.0.3
          name: unit_test 
          resources: {}
          script: |
            #!/bin/bash
            set -e # Makes terminal exit on error
            bundle install 
            echo "-------- RSPEC MODELS | START --------"
            bundle exec rspec spec/models
            echo "-------- RSPEC MODELS | END --------"
            echo "-------- RSPEC CONTROLLER | START --------"
            # bundle exec rspec spec/requests
            echo "-------- RSPEC CONTROLLER | END --------"
        - image: ruby:3.0.3
          name: code-scanning
          resources: {}
          script: |
            #!/bin/bash
            set -e # Makes terminal exit on error
            bundle install 
            chmod u+r+x ./bin/error_handler.sh
            chmod u+r+x ./bin/commit_and_push.sh
            bundle exec ./bin/error_handler.sh "./bin/git_commit_and_push.sh \"CODE SCAN - RuboCop Auto-Correct\""
        - image: gcr.io/kaniko-project/executor:v1.6.0-debug
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json
            #sed -i 's/ENV RAILS_ENV development/ENV RAILS_ENV production/g' $DOCKERFILE_PATH
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: ghcr.io/jenkins-x/jx-changelog:0.1.3
          name: promote-changelog
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            if [ -d "charts/$REPO_NAME" ]; then
            jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
            jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi
            git add * || true
            git commit -a -m "chore: release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Release version $VERSION"
            git push --force origin v$VERSION
            jx changelog create --version v${VERSION}
        - image: ghcr.io/jenkins-x/jx-boot:3.2.287
          name: promote-helm-release
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx gitops helm release
        - image: ghcr.io/jenkins-x-plugins/jx-promote:0.2.5
          name: promote-jx-promote
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx promote -b --all --timeout 1h --no-poll
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
